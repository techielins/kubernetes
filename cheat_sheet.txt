Create a new pod with the nginx image.

~# kubectl run nginx --image=nginx

What is the image used to create the new pods ( in replicaset )

~# kubectl describe rs newpods |grep -i image

Which nodes are pods placed on?

~# kubectl get po -o wide

What images are used in the new webapp pod?

~# kubectl describe po webapp |grep -i image

What is the state of the container in the pod webapp?

~# kubectl describe po webapp |grep -i state

Delete the webapp Pod.

~# kubectl delete pod webapp

To change image of a running pod

~# kubectl edit pod <pod_name>

How many ReplicaSets exist on the system?

~# kubectl get rs

Delete replicaset

~# kubectl delete rs >replicaset_name>

Scale the ReplicaSet to 5 PODs.

~# kubectl scale rs new-replica-set --replicas=5

What is the image used to create the pods in the frontend-deployment deployment?

~# kubectl describe deployments frontend-deployment |grep -i image

How many Namespaces exist on the system?

~# kubectl get ns

How many pods exist in the research namespace?

~# kubectl get po -n research

Create a POD in the finance namespace.

~# kubectl run redis --image=redis --namespace=finance

Creating Namespaces

~# kubectl create namespace test

One way is to set the “namespace” flag when creating the resource:

  kubectl apply -f pod.yaml --namespace=test
 
How many Services exist on the system?

~# kubectl get service

Deploy a redis pod using the redis:alpine image with the labels set to tier=db.

~# kubectl run redis --image=redis:alpine -l tier=db

Create a service redis-service to expose the redis application within the cluster on port 6379.

~# kubectl expose pod redis --name=redis-service --port=6379

Create a deployment named webapp using the image kodekloud/webapp-color with 3 replicas.

~# kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3

Create a new pod called custom-nginx using the nginx image and expose it on container port 8080.

~# kubectl run custom-nginx --image=nginx --port=8080

Create a new deployment called redis-deploy in the dev-ns namespace with the redis image. It should have 2 replicas.

~# kubectl create deployment redis-deploy --image=redis --replicas=2 --namespace=dev-ns

Create a pod called httpd using the image httpd:alpine in the default namespace. Next, create a service of type ClusterIP by the same name (httpd). The target port for the service should be 80.

~# kubectl expose pod httpd --name=httpd --port=80

We have deployed a number of PODs. They are labelled with tier, env and bu. How many PODs exist in the dev environment?

~# kubectl get po -l env=dev

Create a taint on node01 with key of spray, value of mortein and effect of NoSchedule

~# kubectl taint node node01 spray=mortein:NoSchedule

Remove a taint on node01 with key of spray, value of mortein and effect of NoSchedule

~# kubectl taint node node01 spray=mortein:NoSchedule-

To view the log file /log/app.log inside the pod

~# kubectl exec webapp -- tail -f /log/app.log

See csr requests

~#kubectl get csr

Approve csr request

kubectl certificate approve <name>

Deny csr request

kubectl certificate deny <name>

Delete csr request

~# kubectl delete csr <name>

What are the resources the kube-proxy role in the kube-system namespace is given access to?

~# kubectl describe role kube-proxy -n kube-system

Which account is the kube-proxy role assigned to it?

~# kubectl describe rolebindings kube-proxy -n kube-system

A user dev-user is created. User's details have been added to the kubeconfig file. Inspect the permissions granted to the user. Check if the user can list pods in the default namespace.

~# kubectl auth can-i list pods --as dev-user

JSON PATH

~#kubectl get nodes -o=jsonpath='{.items[*].metadata.name}' > /opt/outputs/nodes_names.txt  #list node_names

~#kubectl get nodes -o=jsonpath='{range.items[*]}{.status.nodeInfo.osImage}{"\n"}' > /opt/outputs/nodes_os.txt #list node OS

~# kubectl config view --kubeconfig=/root/my-kube-config -o=jsonpath='{range..users[*]}{.name}{"\n"}' > /opt/outputs/users.txt  #list users


Taking a snapshot of the keyspace served by $ENDPOINT to the file snapshotdb:

~# ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 \
  --cacert=<trusted-ca-file> --cert=<cert-file> --key=<key-file> \
  snapshot save /opt/snapshot-pre-boot.db
  
  Verify the snapshot:
  
  ~# ETCDCTL_API=3 etcdctl --write-out=table snapshot status /opt/snapshot-pre-boot.db
  
  Restoring an etcd cluster
  
  ~# ETCDCTL_API=3 etcdctl --endpoints 127.0.0.1:2379 --data-dir=/var/lib/etcd-new snapshot restore /opt/snapshot-pre-boot.db
  
